// Generated by Xata Codegen 0.29.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "expense",
    columns: [
      { name: "price", type: "float", notNull: true, defaultValue: "1" },
      { name: "category", type: "link", link: { table: "categories" } },
    ],
  },
  {
    name: "categories",
    columns: [{ name: "category", type: "string", unique: true }],
    revLinks: [{ column: "category", table: "expense" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Expense = InferredTypes["expense"];
export type ExpenseRecord = Expense & XataRecord;

export type Categories = InferredTypes["categories"];
export type CategoriesRecord = Categories & XataRecord;

export type DatabaseSchema = {
  expense: ExpenseRecord;
  categories: CategoriesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://C-cero-Jos-s-workspace-8fhvh2.us-east-1.xata.sh/db/c1c3ro",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
